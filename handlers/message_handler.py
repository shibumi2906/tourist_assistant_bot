from aiogram import Router, F
from aiogram.types import Message
from logger import logger

from services.nlp.intent_classifier import detect_intent
from services.bookings.booking_link import generate_booking_url
from keyboards.confirmation import get_booking_confirm_keyboard

message_router = Router()


@message_router.message(F.text)
async def handle_user_text(message: Message, lang: str):
    user_input = message.text.strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_input}")

    # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ GPT
    try:
        intent_data = await detect_intent(user_input)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–ø—Ä–æ—Å–∞ üòî")
        return

    intent = intent_data.get("intent", "unknown")
    params = intent_data.get("params", {})

    logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω intent: {intent}, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")

    # üëâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
    if intent == "find_hotels":
        city = params.get("city")
        checkin = params.get("checkin")
        checkout = params.get("checkout")
        adults = params.get("adults", 2)

        if not city:
            await message.answer("–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –æ—Ç–µ–ª—å üè®")
            return

        url = generate_booking_url(city=city, checkin=checkin, checkout=checkout, adults=adults)

        await message.answer(
            f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π –≤ {city.title()} üëá",
            reply_markup=get_booking_confirm_keyboard(link=url)
        )

    elif intent == "book_tickets":
        await message.answer("‚úàÔ∏è –ò—â—É –±–∏–ª–µ—Ç—ã... (–ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞)")

    elif intent == "search_attractions":
        city = params.get("city")
        if city:
            await message.answer(f"üìç –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ {city.title()} (–±—É–¥–µ—Ç –≤—ã–∑–æ–≤ GPT –∏–ª–∏ API)")
        else:
            await message.answer("–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥–ª—è –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π.")

    elif intent == "plan_route":
        await message.answer("üó∫Ô∏è –°–µ–π—á–∞—Å —Å–æ—Å—Ç–∞–≤–∏–º –º–∞—Ä—à—Ä—É—Ç...")

    elif intent == "translate_phrase":
        await message.answer("üåê –ü–µ—Ä–µ–≤–æ–∂—É —Ñ—Ä–∞–∑—É...")

    else:
        await message.answer("–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ üòÖ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.")

